name: CD Pipeline Automation

on:
  workflow_run:
    workflows: [ CI Quality Checks ]
    types: [ completed ]
    branches: [ main ]

jobs:
  execute-pipeline:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    env: # ✅ env: Global environment variables for all steps
      CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
      CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
      CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}

    steps:
      - name: 👉 Step 0 - Check the event type
        run: |
          echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
          echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "🔎 The name of current branch is ${{ github.ref }} and the repository is ${{ github.repository }}."

      - name: 👉 Step 1 - Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        
      - name: 👉 Step 2 - Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: 👉 Step 3 - Install ClearML
        run: |
          python -m pip install --upgrade pip clearml

      - name: 👉 Step 4 - Debug ENV
        run: |
          echo "CLEARML_API_HOST=$CLEARML_API_HOST"
          if [ -z "$CLEARML_API_HOST" ]; then echo "❌ HOST is empty!"; exit 1; fi
          curl -I $CLEARML_API_HOST

      - name: 👉 Step 5 - Run the pipeline
        run: |
          python pipeline_from_tasks.py
          echo "🍏 This job's status is ${{ job.status }}."


  report-pipeline-metrics:
    runs-on: ubuntu-latest
    needs: execute-pipeline

    env: # ✅ env: Global environment variables for all steps
      CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
      CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
      CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      COMMIT_ID: ${{ github.event.pull_request.head.sha }}

    steps:
      - name: 👉 Step 0 - Check the event type
        run: |
          echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
          echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "🔎 The name of current branch is ${{ github.ref }} and the repository is ${{ github.repository }}."

      - name: 👉 Step 1 - Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        
      - name: 👉 Step 2 - Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: 👉 Step 3 - Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install clearml pandas tabulate github3.py Jinja2

      - name: 👉 Step 4 - Debug ENV
        run: |
          echo "CLEARML_API_HOST=$CLEARML_API_HOST"
          if [ -z "$CLEARML_API_HOST" ]; then echo "❌ HOST is empty!"; exit 1; fi
          curl -I $CLEARML_API_HOST

      - name: 👉 Step 5 - Assign the latest Pipeline as production if it's better than the current one
        run: |
          python cicd/production_tagging.py
          echo "🍏 This job's status is ${{ job.status }}."


  production-pipeline-tagging:
    runs-on: ubuntu-latest
    needs: execute-pipeline

    env: # ✅ env: Global environment variables for all steps
      CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
      CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
      CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}

    steps:
      - name: 👉 Step 0 - Check the event type
        run: |
          echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
          echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "🔎 The name of current branch is ${{ github.ref }} and the repository is ${{ github.repository }}."

      - name: 👉 Step 1 - Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        
      - name: 👉 Step 2 - Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: 👉 Step 3 - Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install clearml pandas tabulate github3.py Jinja2

      - name: 👉 Step 4 - Debug ENV
        run: |
          echo "CLEARML_API_HOST=$CLEARML_API_HOST"
          if [ -z "$CLEARML_API_HOST" ]; then echo "❌ HOST is empty!"; exit 1; fi
          curl -I $CLEARML_API_HOST

      - name: 👉 Step 5 - Comment metrics from step7_model_evaluation of the pipeline
        run: |
          python cicd/pipeline_reports.py
          echo "🍏 This job's status is ${{ job.status }}."


  deploy-fastapi:
    runs-on: ubuntu-latest
    needs: production-pipeline-tagging

    env: # ✅ env: Global environment variables for all steps
      CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
      CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
      CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}
      FASTAPI_PORT: 8000

    steps:
      - name: 👉 Step 0 - Check the event type
        run: |
          echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
          echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "🔎 The name of current branch is ${{ github.ref }} and the repository is ${{ github.repository }}."

      - name: 👉 Step 1 - Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        
      - name: 👉 Step 2 - Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: 👉 Step 3 - Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r serving/requirements.txt

      - name: 👉 Step 4 - Debug ENV
        run: |
          echo "CLEARML_API_HOST=$CLEARML_API_HOST"
          if [ -z "$CLEARML_API_HOST" ]; then echo "❌ HOST is empty!"; exit 1; fi
          curl -I $CLEARML_API_HOST

      - name: 👉 Step 5 - Deploy FastAPI model serving
        run: |
          nohup fastapi dev serving/pose2gloss.py & # Start the FastAPI server in the background
          echo $! > fastapi.pid # Save the PID of the FastAPI server
          sleep 10 # Wait for the server to start
          curl -f http://localhost:$FASTAPI_PORT/health || exit 1 # Verify the server is running

      - name: 👉 Step 6 - Notify deployment status
        if: success()
        run: |
          echo "FastAPI model serving deployed successfully on port $FASTAPI_PORT"

      - name: 👉 Step 7 - Stop FastAPI server (cleanup)
        if: always() # This step will always run, even if the previous steps fail
        run: |
          kill $(cat fastapi.pid) # Stop the FastAPI server using the saved PID
          echo "🍏 This job's status is ${{ job.status }}."